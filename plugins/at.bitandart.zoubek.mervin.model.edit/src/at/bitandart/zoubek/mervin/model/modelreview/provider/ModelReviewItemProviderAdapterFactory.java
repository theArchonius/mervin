/**
 * ******************************************************************************
 *  Copyright (c) 2015, 2016, 2017 Florian Zoubek.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *  
 *  Contributors:
 *     Florian Zoubek - initial API and implementation
 * ******************************************************************************
 */
package at.bitandart.zoubek.mervin.model.modelreview.provider;

import at.bitandart.zoubek.mervin.model.modelreview.util.ModelReviewAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class ModelReviewItemProviderAdapterFactory extends ModelReviewAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this
	 * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by
	 * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public ModelReviewItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.ModelReview}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ModelReviewItemProvider modelReviewItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.ModelReview}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createModelReviewAdapter() {
		if (modelReviewItemProvider == null) {
			modelReviewItemProvider = new ModelReviewItemProvider(this);
		}

		return modelReviewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.PatchSet} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PatchSetItemProvider patchSetItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.PatchSet}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPatchSetAdapter() {
		if (patchSetItemProvider == null) {
			patchSetItemProvider = new PatchSetItemProvider(this);
		}

		return patchSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.Patch} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PatchItemProvider patchItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.Patch}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPatchAdapter() {
		if (patchItemProvider == null) {
			patchItemProvider = new PatchItemProvider(this);
		}

		return patchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.DiagramPatch}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DiagramPatchItemProvider diagramPatchItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.DiagramPatch}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDiagramPatchAdapter() {
		if (diagramPatchItemProvider == null) {
			diagramPatchItemProvider = new DiagramPatchItemProvider(this);
		}

		return diagramPatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.ModelPatch}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ModelPatchItemProvider modelPatchItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.ModelPatch}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createModelPatchAdapter() {
		if (modelPatchItemProvider == null) {
			modelPatchItemProvider = new ModelPatchItemProvider(this);
		}

		return modelPatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.Comment} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CommentItemProvider commentItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.Comment}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCommentAdapter() {
		if (commentItemProvider == null) {
			commentItemProvider = new CommentItemProvider(this);
		}

		return commentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.ModelResource}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ModelResourceItemProvider modelResourceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.ModelResource}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createModelResourceAdapter() {
		if (modelResourceItemProvider == null) {
			modelResourceItemProvider = new ModelResourceItemProvider(this);
		}

		return modelResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.DiagramResource}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DiagramResourceItemProvider diagramResourceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.DiagramResource}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDiagramResourceAdapter() {
		if (diagramResourceItemProvider == null) {
			diagramResourceItemProvider = new DiagramResourceItemProvider(this);
		}

		return diagramResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.NodeDifferenceOverlay}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected NodeDifferenceOverlayItemProvider nodeDifferenceOverlayItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.NodeDifferenceOverlay}
	 * . <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createNodeDifferenceOverlayAdapter() {
		if (nodeDifferenceOverlayItemProvider == null) {
			nodeDifferenceOverlayItemProvider = new NodeDifferenceOverlayItemProvider(this);
		}

		return nodeDifferenceOverlayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.EdgeDifferenceOverlay}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected EdgeDifferenceOverlayItemProvider edgeDifferenceOverlayItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.EdgeDifferenceOverlay}
	 * . <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createEdgeDifferenceOverlayAdapter() {
		if (edgeDifferenceOverlayItemProvider == null) {
			edgeDifferenceOverlayItemProvider = new EdgeDifferenceOverlayItemProvider(this);
		}

		return edgeDifferenceOverlayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.LocationDifference}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected LocationDifferenceItemProvider locationDifferenceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.LocationDifference}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createLocationDifferenceAdapter() {
		if (locationDifferenceItemProvider == null) {
			locationDifferenceItemProvider = new LocationDifferenceItemProvider(this);
		}

		return locationDifferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.SizeDifference}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected SizeDifferenceItemProvider sizeDifferenceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.SizeDifference}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createSizeDifferenceAdapter() {
		if (sizeDifferenceItemProvider == null) {
			sizeDifferenceItemProvider = new SizeDifferenceItemProvider(this);
		}

		return sizeDifferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.StateDifference}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StateDifferenceItemProvider stateDifferenceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.StateDifference}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStateDifferenceAdapter() {
		if (stateDifferenceItemProvider == null) {
			stateDifferenceItemProvider = new StateDifferenceItemProvider(this);
		}

		return stateDifferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.BendpointsDifference}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected BendpointsDifferenceItemProvider bendpointsDifferenceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.BendpointsDifference}
	 * . <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createBendpointsDifferenceAdapter() {
		if (bendpointsDifferenceItemProvider == null) {
			bendpointsDifferenceItemProvider = new BendpointsDifferenceItemProvider(this);
		}

		return bendpointsDifferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.CommentLink}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CommentLinkItemProvider commentLinkItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.CommentLink}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCommentLinkAdapter() {
		if (commentLinkItemProvider == null) {
			commentLinkItemProvider = new CommentLinkItemProvider(this);
		}

		return commentLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.User} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link at.bitandart.zoubek.mervin.model.modelreview.User}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the
	 * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (modelReviewItemProvider != null)
			modelReviewItemProvider.dispose();
		if (patchSetItemProvider != null)
			patchSetItemProvider.dispose();
		if (patchItemProvider != null)
			patchItemProvider.dispose();
		if (diagramPatchItemProvider != null)
			diagramPatchItemProvider.dispose();
		if (modelPatchItemProvider != null)
			modelPatchItemProvider.dispose();
		if (commentItemProvider != null)
			commentItemProvider.dispose();
		if (modelResourceItemProvider != null)
			modelResourceItemProvider.dispose();
		if (diagramResourceItemProvider != null)
			diagramResourceItemProvider.dispose();
		if (nodeDifferenceOverlayItemProvider != null)
			nodeDifferenceOverlayItemProvider.dispose();
		if (edgeDifferenceOverlayItemProvider != null)
			edgeDifferenceOverlayItemProvider.dispose();
		if (locationDifferenceItemProvider != null)
			locationDifferenceItemProvider.dispose();
		if (sizeDifferenceItemProvider != null)
			sizeDifferenceItemProvider.dispose();
		if (stateDifferenceItemProvider != null)
			stateDifferenceItemProvider.dispose();
		if (bendpointsDifferenceItemProvider != null)
			bendpointsDifferenceItemProvider.dispose();
		if (commentLinkItemProvider != null)
			commentLinkItemProvider.dispose();
		if (userItemProvider != null)
			userItemProvider.dispose();
	}

}
